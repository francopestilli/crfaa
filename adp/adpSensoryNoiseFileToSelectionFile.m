function [CRF, CDF] = adpSensoryNoiseFileToSelectionFile(sensoryNoiseFileName, saveFile)
%
% (1) Loads up a sensory-noise analysis file generated by 
%     adp_makenoisestatisticsfigs2_r2_compareNoise.m
% (2) Fills up the fileds of a selection file readable by 
%     selectionModel.m
% (3) Saves the selection file in the same folder of the sensory-noise
%     file.
%
%   [CRF, CDF] = adapSensoryNoiseFileTOSelectionFile(snFname,selectionFname)
%
% INPUTS:
%     sensoryNoiseFileName - full path to a file geenrated by the function:
%                            adp_makenoisestatisticsfigs2_r2_compareNoise.m
%     saveFile             - 1      = save a file in the same folder of the
%                                     sensoryNoiseFileName.
%                            string = fullpath to a file name to use for saving the CRF
%                                     and CDF.
%                            0      = do not save a file.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %% ** sensoryNoiseFile spec ** %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  results{iObserver, iArea, iFit} = exptData;
% 
%  iObserver = {'average','jg', 'fp', 'fm'}
%  iArea     = {'v1','v2','v3','v4'}
%  iFit      = {'D2D' 'D2A' 'A2A'}
%
%  results{1,1,1}  =
%                        plotInfo: [1x1 struct]
%                        behavior: [1x1 struct]
%                       pedestals: [0 0.0175 0.0350 0.0700 0.1400 0.2800 0.5600 0.8400]
%                    pedestalsTvC: [0.0088 0.0175 0.0350 0.0700 0.1400 0.2800 0.5600 0.8400]
%                    pedestalsCRF: [0 0.0175 0.0350 0.0700 0.1400 0.2800 0.5600 0.8400]
%                     fitcontrast: [1x100 double]
%          crf_distributed_target: [0.3849 0.4473 0.5050 0.5414 0.6251 0.8126 0.8348 1.1097]
%                    crf_attended: [0.4747 0.5721 0.7096 0.7968 0.7738 0.8899 0.9966 1.0482]
%       crf_distributed_nontarget: [0.0879 0.3217 0.4061 0.4225 0.4642 0.6161 0.7798 1]
%                  crf_unattended: [0.0729 0.2190 0.3698 0.4184 0.4853 0.5272 0.7207 0.9646]
%      crf_distributed_target_ste: [0.0309 0.0314 0.0317 0.0042 0.0829 0.0716 0.0331 0.0850]
%                crf_attended_ste: [0.0545 0.0692 0.0181 0.0489 0.0191 0.1242 0.0480 0.0329]
%   crf_distributed_nontarget_ste: [0.0663 0.0394 0.0039 0.0104 0.0217 0.0706 0.0115 0]
%              crf_unattended_ste: [0.0413 0.1050 0.0648 0.0405 0.0511 0.1016 0.0704 0.0385]
%                         use_crf: [0.0879 0.3217 0.4061 0.4225 0.4642 0.6161 0.7798 1]
%                     use_crf_ste: [0.0663 0.0394 0.0039 0.0104 0.0217 0.0706 0.0115 0]
%                        used_crf: 'crf_distributed_nontarget'
%                       minOffset: 0
%                            maxk: Inf
%              distractorContrast: {1x8 cell}
%                           title: []
%                             crf: []
%                           noise: [1x1 struct]
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %% ** selectionFile structure spec ** %% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  CRF - a structure containign the data and the conditions for the contrast
%        brain response, the contrast response function (CRF). 
%
%        CRF is a structure that has two different contrast response functions (cued and uncued)
%        for each condition you are testing. The names of the conditions are arbitrary but
%        each condition must contain a cued and uncued CRF. So, for example if you have a 
%        focal cue condition then you would have:         
%        - CRF.focal.cued   (target) 
%        - CRF.focal.uncued (non-target)
%                
%        There should also be a field to tell whether the cued and uncued functions are the
%        same (i.e. for a distributed cue condition or different):
%        - CRF.focal.sameCuedUncued       = false;  
%        - CRF.distributed.sameCuedUncued = true; % in the distributed cue condition target 
%                                                 % and non-target are the same.
%        For each of the cued/uncued fields above there should be fields for data and fit
%        which contain the contrasts and responses. For example, something like:
%        - CRF.focal.cued.data.c   = [0 0.1 0.5 1]; % Contrast of the stimulus on the 
%                                                   % x-axis of the CRF)
%        - CRF.focal.uncued.data.r = [0.01 0.3 0.7 1.10]; % The actual CRF BOLD responses
%  
%  CDF - a structure containing the data and the condition for the
%        behavior, the contrast discrimination function (CDF)
%  
%        CDF is a similar struncture containing contrast discrimination data. So, continuing
%        from the exmaple above, if you have a focal cue condition you would have fields for
%        both data and fit that contain contrast discrimination data:
%        - CDF.focal.data.c     = [0.01 0.5 0.7];  % Pedestal contrast 
%        - CDF.focal.data.t     = [0.04 0.08 0.12];% Threshold, delta-c
%        - CDF.focal.data.tste  = [0.01 0.02 0.01];% ste of threshold
%        - CDF.focal.data.d     = {[0.0 0.01 0.02], ...
%                                  [0.01 0.5 0.7],  ...
%                                  [0.01 0.5 0.7]};
%        - CDF.focal.data.nCued = 1;
% 
%        Where c are the pedestal contrasts, t are the measured thresholds and d is the
%        distractor contrasts in a cell array. The cued field contains how many targets
%        were cued. The tste field contains the standard error of the CDF data (for display)
%
% EXAMPLE:
%   sensoryNoiseFileName = fullpath(adp_defaultDataFolder,'04-Nov-2012CompareNoiseFit_nkn2_A0.mat');
%   
%
% Franco Pestilli (c) Stanford University 2012

if ieNotDefined('saveFile'), saveFile = 0;end

% Load the sensoryFile
load(sensoryNoiseFileName);
  
%% CRF - contrast response function
for iArea = 1:size(results,2)
  for iObs  = 1:size(results,1)
    %-% Focal cue condition
    % Target
    CRF(iObs,iArea).focal.cued.data.c    = results{iObs,iArea,3}.pedestalsCRF;
    CRF(iObs,iArea).focal.cued.data.r    = results{iObs,iArea,3}.crf_attended;
    CRF(iObs,iArea).focal.cued.data.rste = results{iObs,iArea,3}.crf_attended_ste;
    
    % Non-targets
    CRF(iObs,iArea).focal.uncued.data.c    = results{iObs,iArea,3}.pedestals;
    CRF(iObs,iArea).focal.uncued.data.r    = results{iObs,iArea,3}.crf_unattended;
    CRF(iObs,iArea).focal.uncued.data.rste = results{iObs,iArea,3}.crf_unattended_ste;
    CRF(iObs,iArea).focal.sameCuedUncued   = false;
    
    %-% Distributed cue condition
    % Target
    CRF(iObs,iArea).distributed.cued.data.c    = results{iObs,iArea,1}.pedestalsCRF;
    CRF(iObs,iArea).distributed.cued.data.r    = results{iObs,iArea,1}.crf_distributed_target;
    CRF(iObs,iArea).distributed.cued.data.rste = results{iObs,iArea,1}.crf_distributed_target_ste;
    
    % Non-targets
    CRF(iObs,iArea).distributed.uncued.data.c    = results{iObs,iArea,1}.pedestals;
    CRF(iObs,iArea).distributed.uncued.data.r    = results{iObs,iArea,1}.crf_distributed_nontarget;
    CRF(iObs,iArea).distributed.uncued.data.rste = results{iObs,iArea,1}.crf_distributed_nontarget_ste;
    CRF(iObs,iArea).distributed.sameCuedUncued   = false; % in the distributed cue condition target
  end
end

%% CDF - contrast discrimination function
for iArea = 1:size(results,2)
  for iObs  = 1:size(results,1)
    %-% Focal cue condition
    % Target
    CDF(iObs,iArea).focal.data.c     = results{iObs,iArea,3}.pedestals;
    CDF(iObs,iArea).focal.data.t     = results{iObs,iArea,3}.behavior.tvc.thisTvC;
    CDF(iObs,iArea).focal.data.tste  = results{iObs,iArea,3}.behavior.tvc.thisTvCste;
    CDF(iObs,iArea).focal.data.nCued = 1;
    CDF(iObs,iArea).focal.data.d     = results{iObs,iArea,3}.distractorContrast;

    %-% Distributed cue condition
    % Target
    CDF(iObs,iArea).distributed.data.c     = results{iObs,iArea,1}.pedestals;
    CDF(iObs,iArea).distributed.data.t     = results{iObs,iArea,1}.behavior.tvc.thisTvC;
    CDF(iObs,iArea).distributed.data.tste  = results{iObs,iArea,1}.behavior.tvc.thisTvCste;    
    CDF(iObs,iArea).distributed.data.nCued = 4;
    CDF(iObs,iArea).distributed.data.d     = results{iObs,iArea,3}.distractorContrast;

  end
end

% Save file to disk
if ischar( saveFile ) % A full path to a file was passed-in
  fprintf('[%s] Saving file:\n %s\n',mfilename,saveFile);
  save(saveFile,'CRF','CDF');
  
elseif (saveFile == 1) % The file will be saved in the save folder of the sensoryNoiseFile
  [p,n,ext] = fileparts(sensoryNoiseFileName);
  
  fprintf('[%s] Saving file:\n %s\n',mfilename,fullfile(p,sprintf('%s_%s',n,'seletionModelData.mat')))
  save(fullfile(p,sprintf('%s_%s',n,'seletionModelData.mat')),'CRF','CDF');
end

return

