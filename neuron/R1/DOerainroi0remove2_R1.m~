function [d timeSeries events] = DOerainroi0remove2_R1(roinames,groupNum,scanNum,minR2,preprocessFun)
% function [d timeSeries events] = DOerainroi0remove2_R1(roinames,groupNum,scanNum,minR2,preprocessFun)
%      usage: DOerainroi0remove2_R1()
%         by: franco pestilli
%       date: 2010/04/04
%    purpose: 0. does analysis concatenating 4 quadrant rois.
%             1. uses doerainroi to compute a single timecourse er in an roi.
%             2. it multiply the scm with the response to 0% contrast
%             3. it subtracts the obtained tseries from the original tseries.
%
% if you don't know how to change something look up how it is done in the
% GUI by calling: guide('mrLoadRetGUI.fig') click on the 'Menu Editor icon'and then edit
% the GUI function (edit mrLoadRetGUI) to look for the call.
%
% version R1 is the one written to do the analyses to reply to reviewers in
% NN after the first submission of the paper
%
% the only difference is that it now subtracts the response to the:
% (1) 0%-contrast in the focal non-target condition for the focal crf
% (2) 0%-contrast in the distributed non-target condition for the
%     distributed crfs
%
% franco pestilli

% check arguments
if ~any(nargin == 5)
    help DOerainroi0remove2_R1
    mean_hdr = [];
    timeSeries = [];
    return
end

% check if exist a mrSession.mat
if ~(exist('mrSession.mat','file') == 2)
    disp(sprintf('[DOerainroi0remove2_R1] mrSession.mat not found in this directory.'));
    return
end

% 1. get responses in each roi and scm:
hdrLengthInSeconds = 19;
% open new view:
v = newView;
groupName = viewGet(v,'groupName',groupNum);
disp(sprintf('[DOerainroi0remove2_R1] Working on ALL ROIs, in group %s, scan %i.',groupName,scanNum));

% load scan info:
d1 = loadScan(v,scanNum,groupNum,0);
d = d1;

% stack together timeseries and scm for all rois
scm = []; mean_roi_ts = [];
for roinum = 1:length(roinames)
    % select the right volumes/conditions:
    disp(sprintf('[DOerainroi0remove2_R1] computing stimVols with d=%s, on roi: %s',preprocessFun,roinames{roinum}));
    preprocessType = sprintf('run=%s(d,%s)',preprocessFun,num2str(roinum));
    d = eventRelatedPreProcess(d,preprocessType);
    
    % save concatenation info for each roi (needed for fitTimecourse):
    timeSeries.concatInfo{roinum} = d.concatInfo;
    timeSeries.stimvol{roinum} = d.stimvol;
    
    disp(sprintf('[DOerainroi0remove2_R1] stimVols computed with d=%s, on roi: %s',preprocessFun,roinames{roinum}));

    % getting all info out of analysis:
    tr = d.tr;
    hdrlen = ceil(hdrLengthInSeconds/tr);% from seconds (19) to trs (24)
    hdrNum = d.hdrNum;
    
    if roinum == 1
        % save target contrasts, reaction, and response:
        events = d.e;
    end
 
    % make a stimulus convolution matrix
    % (the '1' option applies a filter to it) :
    disp(sprintf('[DOerainroi0remove2_R1] make scm for roi %s and stack it with the rest of the scm',roinames{roinum}));
    d = makescm(d,hdrlen,1);
    % save the scm:
    scm = [scm; d.scm];
    
    timeSeries.stimvol{roinum} = d.stimvol;
   
    d.scm = [];

    % load time series from the right ROI:
    disp(sprintf('[DOerainroi0remove2_R1] load timeseries for roi %s and stack it with the rest of the timeseries',roinames{roinum}));
    roi_ts = loadROITSeries(v,roinames{roinum},scanNum,groupNum);
    
    % change any ZERO in the tseries to nan to work properly with nanmean:
    roi_ts.tSeries(roi_ts.tSeries==0) = nan;
    
    % stack with the rest of the time series
    mean_roi_ts = [mean_roi_ts squeeze(nanmean(roi_ts.tSeries,1))];

    disp(sprintf('[DOerainroi0remove2_R1] timeseries loaded for roi %s and stacked with the rest of scm (size tSeries=[%s]) ',roinames{roinum},num2str(size(mean_roi_ts))));
end

% % save the concatInfo across roi:
timeSeries = concatInfoMultyROI(timeSeries);
timeSeries = concatStimvol(timeSeries);
timeSeries.dim = [d.dim(1:3) size(scm,1)];

% clear d and view
clear roi_ts d;deleteView(v);

% computing hdr on average response in the roi:
disp('[DOerainroi0remove2_R1] compute mean response on thresholded mean roi time series');
d.BeforeSubtraction_d  = getr2timecourse(mean_roi_ts,hdrNum,hdrlen,scm,tr);

% empting the data and scm fields to save memory
mean_hdr.data = [];
mean_hdr.scm = [];


% 2. select the hdr for 0% contrast response for focal non-target and distirbuted non-target:
disp('[DOerainroi0remove2_R1] now removing the response to the 0%-contrast unattended stimulus');
if hdrNum == 48 % correct incorrect or 1st/2nd interval anaylyses are not impelemente dyet
 keyboard
 unattended0index = 17;
elseif hdrNum == 32
 attended0index   = 9;
 unattended0index = 25;
else
 disp('[DOerainroi0remove2_R1] cannot find the unattended response to the 0-pedestal contrast wth this number of HRF, please check the following lines.');
 keyboard
end

zeroContrastResponse_dis = (d.BeforeSubtraction_d.ehdr(unattended0index,:)/100); % here i divide by 100 because getr2timecourse returns results in % [0-100] i want [0-1]
zeroContrastResponse_att = (d.BeforeSubtraction_d.ehdr(attended0index,:)/100); % here i divide by 100 because getr2timecourse returns results in % [0-100] i want [0-1]

% 3. convolve 0-contrast response with event model
disp('[DOerainroi0remove2_R1] now subtracting the estimated time series from the 0%-contrast unattended stimulus');
disp('[DOerainroi0remove2_R1] off the time course of the voxels abve the r2 threshold');
% 4. create a scm that is only for the distributed and focal trials
preprocessFun = 'focalVSdistributed';
% select the right volumes/conditions:
disp(sprintf('[DOerainroi0remove2_R1] computing stimVols with d1=%s',preprocessFun));
preprocessType = sprintf('run=%s(d)',preprocessFun);
d1 = eventRelatedPreProcess(d1,preprocessType);
disp(sprintf('[DOerainroi0remove2_R1] stimVols computed with d1=%s',preprocessFun));

% getting all info out of analysis:
hdrNum = d1.hdrNum;

disp(sprintf('[DOerainroi0remove2_R1] make scm for roi %s and stack it with the rest of the scm',roinames{roinum}));
d1 = makescm(d1,hdrlen,1);
% save the scm (replicating because the time series are concatenated across ROIs):
scm_fd = [d1.scm; d1.scm; d1.scm; d1.scm];
clear d1;

% 5. multiply this scm by the 0-contrast response; 
zeroContrastResponse = [zeroContrastResponse_att zeroContrastResponse_dis]';
estimatedTseries = scm_fd*zeroContrastResponse;
clear scm_fd

% 6. subtract the resulting time series fromt he ROI time series; subtracted_mean_roi_ts = mean_roi_ts - estimatedTseries';
% subtract each condition estimatedTseries from the correct condition 
subtracted_mean_roi_ts = mean_roi_ts - estimatedTseries';

% 7. re-do era on the new tseries:
% computing average hdr in roi:
disp('[DOerainroi0remove2_R1] now compute mean response on subtracted mean roi time series');
d.AfterSubtraction_d  = getr2timecourse(subtracted_mean_roi_ts,hdrNum,hdrlen,scm,tr);
clear scm;

% empting the data and scm fields to save memory
mean_hdr.data = [];
mean_hdr.scm  = [];

% saving time series for output:
timeSeries.original_ts = mean_roi_ts;
timeSeries.estimated_ts = estimatedTseries;
timeSeries.subtracted_mean_roi_ts = subtracted_mean_roi_ts;
timeSeries.zeroContrastResponse_att = zeroContrastResponse_att;
timeSeries.zeroContrastResponse_dis = zeroContrastResponse_dis;
disp(sprintf('[DOerainroi0remove2_R1] Worked on ALL ROIs, in group %s, scan %i.',groupName,scanNum));


%%%%%%%%%%%%%%%%%%%%%%
% concatInfoMultyROI %
%%%%%%%%%%%%%%%%%%%%%%
function d = concatInfoMultyROI(d)
% function d = concatInfoMultyROI(d)
%
% function to concatenate the concatenateInfo for cases in which several
% time series are concatenated
%
% fp 2008.07.29

if ~isfield(d,'concatInfo')
    disp('[ConcatInfoMultyROI] ''d'' structure has no concatInfo field');
    return
end

% check that all concatenation info is the same:
for ii = 1:length(d.concatInfo)-1
    fieldNames1 = fieldnames(d.concatInfo{ii});
    fieldNames2 = fieldnames(d.concatInfo{ii+1});
    ok = strcmp(fieldNames1,fieldNames2);
    if ~any(ok)
        disp('[ConcatInfoMultyROI] ''d'' structure has no concatInfo field');
        return
    end
end

% grab the fields out of one concatenation:
fieldNames = fieldnames(d.concatInfo{1});

% inititalizing field names to []:
for jj = 1:length(fieldNames)
    concatInfo.(fieldNames{jj}) = [];
end

% find field names that do not necessitate special treatment:
fieldNames = setdiff(fieldNames,{'n','whichScan','runTransition'});

% run through all the concatenated info and stack them:
for ii = 1:length(d.concatInfo)
    % run through the field names except the one in fieldNames:
    for jj = 1:length(fieldNames)
        concatInfo.(fieldNames{jj}) = [concatInfo.(fieldNames{jj}) d.concatInfo{ii}.(fieldNames{jj})];
    end
    % these fields get a special treatment
    if ii == 1
        concatInfo.runTransition = d.concatInfo{ii}.runTransition;
        concatInfo.n = d.concatInfo{ii}.n;
        concatInfo.whichScan = d.concatInfo{ii}.whichScan;
    else
        concatInfo.runTransition = [concatInfo.runTransition; max(max(concatInfo.runTransition))+d.concatInfo{ii}.runTransition];
        concatInfo.whichScan = [concatInfo.whichScan d.concatInfo{ii}.whichScan+concatInfo.n];
        concatInfo.n = concatInfo.n + d.concatInfo{ii}.n;
    end
end
d.concatInfo = concatInfo;


%%%%%%%%%%%%%%%%%
% concatStimvol %
%%%%%%%%%%%%%%%%%
function d = concatStimvol(d)
% function d = concatStimvol(d)
%
% function to concatenate the stimvol for cases in which several
% time series are concatenated
%
% fp 2008.07.29

if ~isfield(d,'stimvol')
    disp('[ConcatInfoMultyROI] ''d'' structure has no concatInfo field');
    return
end

% initializing d2 for each stimulus condition:
for jj = 1:length(d.stimvol{1})
    d2.stimvol{jj} = [];
end

timeSeriesLength = length(d.concatInfo.whichVolume)/length(d.stimvol);

% run through the rois:
for ii = 1:length(d.stimvol)
    % run through the conditions
    for jj = 1:length(d.stimvol{ii})
        if ii == 1
            d2.stimvol{jj} = [d2.stimvol{jj} d.stimvol{ii}{jj}];
        else
            %             d2.stimvol{jj} = [d2.stimvol{jj} max(d2.stimvol{jj})+d.stimvol{ii}{jj}];
            d2.stimvol{jj} = [d2.stimvol{jj} d.stimvol{ii}{jj}+(ii-1)*timeSeriesLength];
        end
    end
end
d.stimvol = d2.stimvol;


